ram: 256B
0-251: data
252: port 0 (read), port 2 (write)
253: port 1 (read), port 3 (write)
254: flags
255: pc

flags:
port 0 output ready, port 1 output ready, port 2 input ready, port 3 input ready, unused, <0, ==0, error (carry)

instructions: 1B opcode, 2*1B arguments

opcode:
2b op, 2b argument flags, 1b set flags, 1b execute if error flag, 2b execute if sign flags

op:
mov
add
nor
and

argument flags:
00 dst cell, src cell
01 dst cell, src literal
10 dst pointer, src cell
11 dst cell, src pointer

sign flags: 1b if <0, 1b if ==0
00 always
01 ==0
10 <0
11 <=0

halt if pc>=252

compilable format:
<op> [arguments ...] [flags]
argument format:
0  value of cell 0
'0 literal 0
*0 value of cell pointed by cell 0
&0 reference to instruction 0
values can also be negative, hexadecimal, binary or octal, specified with -, x, b, or o before the number
instead of a number the value can be a single character after c
flags:
f set flags
e execute if error flag is set
< execute if <0 flag is set
= execute if =0 flag is set
native ops:
mov <dst> <src>
add <dst> <src>
nor <dst> <src>
and <dst> <src>
compiled ops:
var <initial value>
inc <dst>, dst can't be pointer
dec <dst>, dst can't be pointer
jmp <dst>
hlt
rsf <mask>, resets to 0 all flags that are 0 in the mask
rse, resets err flag
rsn, resets neg flag
rsz, resets zero flag
not <dst>, dst can't be pointer
chk <src>, src shouldn't be a port and can't be a pointer, doesn't automatically sets the flags
neg <dst>, dst can't be pointer
sub <dst> <src>, src must be a cell
cmp <dst> <src>, src must be a cell, checks dst-src without changing dst, doesn't automatically sets the flags
cma <dst> <src>, src must be a cell, checks dst+src without changing dst, doesn't automatically sets the flags
cmx <dst> <src1> <src2>, checks dst+src1, sets dst to dst+src1+src2, doesn't automatically sets the flags